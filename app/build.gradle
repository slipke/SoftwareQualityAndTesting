apply plugin: 'com.android.application'

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.0"

    defaultConfig {
        applicationId "de.hdmstuttgart.zeitfresser"
        minSdkVersion 21
        //noinspection OldTargetApi
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        quiet false
        checkReleaseBuilds true
        abortOnError false
        ignoreWarnings false

        xmlReport true
        lintConfig file("$project.rootDir/Lint_for_Gradle.xml")
        xmlOutput file("$project.buildDir/reports/lint/lint-results.xml")
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    //noinspection GradleDependency
    compile 'com.android.support:appcompat-v7:24.0.0'
    //noinspection GradleDependency
    compile 'com.android.support:design:24.0.0'
    // JUNIT
    testCompile 'junit:junit:4.12'
    // MOCKITO
    testCompile 'org.mockito:mockito-core:2.2.22'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    //Hier wird angegeben, dass diese Library mit compiliert werden muss (Kuchendiagramm)
    compile 'com.github.PhilJay:MPAndroidChart:v2.1.6'
}

repositories {
    //In diesem Repository ist die Library für das Kuchendiagramm zu finden
    maven { url "https://jitpack.io" }
}

task checkstyle(type: Checkstyle) {
    configFile file("${project.rootDir}/google_checkstyle.xml")
    configProperties.checkstyleSuppressionsPath =
            file("${project.rootDir}/checkstyle_suppressions.xml").absolutePath
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files()
}

tasks.withType(Checkstyle) {
    reports {
        html.enabled = true
        html.destination rootProject.file("app/build/reports/checkstyle/checkstyle-results.html")
        xml.enabled = true
        xml.destination rootProject.file("app/build/reports/checkstyle/checkstyle-results.xml")
    }
}

/**
 * notwendiger Workaround für die Benutzung von Checkstyle
 * Details: http://stackoverflow.com/questions/28749804/how-to-compile-project-with-
 google-checkstyle-rules-with-gradle */
configurations {
    checkstyleOverride
}

dependencies {
    checkstyleOverride('com.puppycrawl.tools:checkstyle:7.1')
}

tasks.withType(Checkstyle) {
    checkstyleClasspath = project.configurations.checkstyleOverride
}

/**
 * Ende des notwendigen Workarounds für die Benutzung von Checkstyle
 dependencies {tasks.withType(Checkstyle) {*/

apply plugin: 'findbugs'

task customFindbugs(type: FindBugs) {
    ignoreFailures = true
    effort = "max"
    reportLevel = "low"
    classes = files("$project.buildDir/intermediates/classes")

    // Dieses File wird normalerweise in Android Studio automatisch
    // angelegt und enthält alle Files, die nicht durch FindBugs
    // analysiert werden sollen
    excludeFilter = file("${project.rootDir}/findbugs_exclude.xml")

    source = fileTree('src/main/java/')
    classpath = files()

    reports {
        xml.enabled = true
        xml.withMessages = true
        //FindBugs kann imme rnur einen Report,
        // entweder xml oder html erzeugen
        html.enabled = !xml.enabled
        xml.destination "$project.buildDir/reports/findbugs/findbugs-results.xml"
        html.destination "$project.buildDir/eports/findbugs/findbugs-results.html"
    }

    // FindBugs benutzt kompilierte Files für die Analyse!
    dependsOn "compileReleaseJavaWithJavac"
}